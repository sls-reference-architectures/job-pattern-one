service: job-pattern-one

frameworkVersion: ^3

configValidationMode: error

provider:
  architecture: arm64
  deploymentBucket:
    name: com.reference-architecture.deploys
    maxPreviousDeploymentArtifacts: 5
    serverSideEncryption: AES256
  environment:
    EVENT_BUS_NAME: ${self:custom.eventBusName}
    TABLE_NAME: ${self:custom.tableName}
  logRetentionInDays: 7
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  tags:
    lumigo:auto-trace: 'true'

functions:
  createJob:
    handler: jobs/handlers/createJob.default
    events:
    - httpApi:
        method: POST
        path: /jobs
    iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:PutItem
      Resource: !GetAtt JobsTable.Arn

  ## Events  
  onDbStreamEvent:
    handler: jobs/handlers/onDbStreamEvent.default
    events:
    - stream:
        type: dynamodb
        arn: !GetAtt JobsTable.StreamArn
        batchSize: 10
    iamRoleStatements:
    - Effect: Allow
      Action: events:PutEvents
      Resource: !GetAtt JobsEventBus.Arn

  onJobCreated:
    handler: jobs/handlers/onJobCreated.default
    environment:
      TRANSLATE_STATE_MACHINE_ARN: !Ref TranslateStateMachine
    events:
    - eventBridge:
        eventBus: !GetAtt JobsEventBus.Name
        pattern:
          source:
          - job
          detail-type:
          - create
    iamRoleStatements:
    - Effect: Allow
      Action: states:StartExecution
      Resource: !Ref TranslateStateMachine

  ## Step Function Lambdas
  setJobStatusStarted:
    handler: jobs/handlers/setJobStatusStarted.default
    iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:PutItem
      Resource: !GetAtt JobsTable.Arn

  translatePhrase:
    handler: jobs/handlers/translatePhrase.default

  setJobStatusComplete:
    handler: jobs/handlers/setJobStatusComplete.default
    iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:PutItem
      Resource: !GetAtt JobsTable.Arn


custom:
  esbuild:
    minify: true
  eventBusName: jobs-${sls:stage}
  prune:
    automatic: true
    number: 1
  tableName: jobs-${sls:stage}

stepFunctions:
  validate: true
  stateMachines:
    translateStateMachine:
      name: TranslateStateMachine
      type: EXPRESS
      loggingConfig:
        level: ALL
        includeExecutionData: false
        destinations: 
        - !GetAtt TranslateStateMachineLogGroup.Arn
      definition:
        StartAt: Set Job Status Started
        States:
          Set Job Status Started:
            Type: Task
            Resource: !GetAtt setJobStatusStarted.Arn
            Next: Translate Phrase
          Translate Phrase:
            Type: Task
            Resource: !GetAtt translatePhrase.Arn
            Next: Set Job Status Completed
          Set Job Status Completed:
            Type: Task
            Resource: !GetAtt setJobStatusComplete.Arn
            End: true

resources:
  Resources:
    JobsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
        ContributorInsightsSpecification:
          Enabled: true
        KeySchema:
        - AttributeName: id
          KeyType: HASH
        AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: True
    JobsEventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: ${self:custom.eventBusName}
    TranslateStateMachineLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: !Join ['/', [stepfunctions, TranslateStateMachine]]
plugins:
- serverless-esbuild
- serverless-iam-roles-per-function
- serverless-deployment-bucket
- serverless-prune-plugin
- serverless-step-functions